{"version":3,"sources":["Components/DrumPad/DrumPad.component.jsx","soundkeymapping.js","App.js","serviceWorker.js","index.js"],"names":["DrumPad","buttonID","passedSound","title","setTextDisplay","useState","active","setActive","soundRef","useRef","playSound","current","play","setTimeout","useEventListener","e","key","toUpperCase","console","log","className","id","toLowerCase","onClick","src","ref","kit","q","sound","w","a","s","d","z","x","c","kitKeys","Object","keys","App","textDisplay","map","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iSAgCeA,G,MA1BC,SAAC,GAAoD,IAAnDC,EAAkD,EAAlDA,SAAUC,EAAwC,EAAxCA,YAAaC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,eAAoB,EACtCC,oBAAS,GAD6B,mBAC3DC,EAD2D,KACnDC,EADmD,KAE5DC,EAAWC,iBAAO,MAElBC,EAAY,WAChBH,GAAU,GACVC,EAASG,QAAQC,OACjBR,EAAeD,GACfU,YAAW,kBAAIN,GAAU,KAAQ,MAUnC,OAPAO,YAAiB,WAAW,SAACC,GACxBA,EAAEC,IAAIC,eAAehB,IACtBiB,QAAQC,IAAIJ,EAAEC,KACdN,QAKF,yBAAKU,UAAS,UAAKd,EAAS,SAAW,GAAzB,aAAwCe,GAAE,UAAKpB,EAASqB,cAAd,SAAoCC,QAASb,GACnG,+BAAQT,GACR,2BAAOuB,IAAKtB,EAAauB,IAAKjB,EAAUY,UAAU,OAAOC,GAAIpB,GAAWA,MCmB/DyB,EApCH,CACRC,EAAG,CACCC,MAAO,2CACPzB,MAAO,SAEX0B,EAAG,CACCD,MAAO,8CACPzB,MAAO,YAEXY,EAAG,CACCa,MAAO,gDACPzB,MAAO,cAEX2B,EAAG,CACCF,MAAO,8CACPzB,MAAO,cAEX4B,EAAG,CACCH,MAAO,6CACPzB,MAAO,WAEX6B,EAAG,CACCJ,MAAO,8CACPzB,MAAO,gBAEX8B,EAAG,CACCL,MAAO,2CACPzB,MAAO,SAEX+B,EAAG,CACCN,MAAO,0CACPzB,MAAO,QAEXgC,EAAG,CAAChC,MAAO,QAASyB,MAAO,2CCvCzBQ,EAAUC,OAAOC,KAAKZ,GAoBba,MAlBf,WAAgB,IAAD,EACyBlC,mBAAS,IADlC,mBACNmC,EADM,KACOpC,EADP,KAGb,OACE,yBAAKgB,UAAU,OACb,4CACA,wBAAIC,GAAG,WAAP,gBAA+BmB,GAC/B,yBAAKpB,UAAU,gBACb,yBAAKC,GAAG,gBACLe,EAAQK,KAAI,SAACzB,GACZ,OAAQ,kBAAC,EAAD,CAASA,IAAKA,EAAKf,SAAUe,EAAIC,cAAef,YAAawB,EAAIV,GAAKY,MAAOzB,MAAOuB,EAAIV,GAAKb,MAAOC,eAAgBA,WCJpHsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMC,c","file":"static/js/main.23b0f845.chunk.js","sourcesContent":["import React, {useState, useRef} from 'react'\r\nimport useSound from \"use-sound\"\r\nimport useEventListener from '@use-it/event-listener'\r\n\r\nimport \"./DrumPad.styles.scss\"\r\n\r\nconst DrumPad = ({buttonID, passedSound, title, setTextDisplay}) => {\r\n  const [active, setActive] = useState(false)\r\n  const soundRef = useRef(null);\r\n  \r\n  const playSound = () => {\r\n    setActive(true)\r\n    soundRef.current.play()\r\n    setTextDisplay(title)\r\n    setTimeout(()=>setActive(false), 100)\r\n  };\r\n  \r\n  useEventListener('keydown', (e)=>{\r\n    if(e.key.toUpperCase()==buttonID) {\r\n      console.log(e.key)\r\n      playSound()\r\n    }\r\n  })\r\n\r\n  return (\r\n    <div className={`${active ? 'active' : ''} drum-pad`} id={`${buttonID.toLowerCase()}Sound`} onClick={playSound}>\r\n      <label>{buttonID}</label>\r\n      <audio src={passedSound} ref={soundRef} className=\"clip\" id={buttonID}>{buttonID}</audio>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DrumPad\r\n","// import gunRack from \"./Sounds/The Kit Plug - Source (Drum Kit)/FX/SOURCE - FX - 006.wav\"\r\n// import bass from \"./Sounds/The Kit Plug - Source (Drum Kit)/808/SOURCE - 808 - 004.wav\"\r\n// import kick from \"./Sounds/The Kit Plug - Source (Drum Kit)/Kick/SOURCE - KICK - 006.wav\"\r\n// import snare from \"./Sounds/The Kit Plug - Source (Drum Kit)/Snare/SOURCE - SNARE - 005.wav\"\r\n// import highHat from \"./Sounds/The Kit Plug - Source (Drum Kit)/HH/SOURCE - HH - 001.wav\"\r\n// import vox from \"./Sounds/The Kit Plug - Source (Drum Kit)/Vox/SOURCE - VOX - 001.wav\"\r\n// import clap from \"./Sounds/The Kit Plug - Source (Drum Kit)/Clap/SOURCE - CLAP - 001.wav\"\r\n// import cym from \"./Sounds/The Kit Plug - Source (Drum Kit)/Cym/SOURCE - CYM - 001.wav\"\r\n// import perc from \"./Sounds/The Kit Plug - Source (Drum Kit)/Perc/SOURCE - PERC - 001.wav\"\r\n\r\nconst kit = {\r\n    q: {\r\n        sound: \"https://drumbit.app/kits/kit-1/crash.wav\",\r\n        title: \"crash\"\r\n    },\r\n    w: {\r\n        sound: \"https://drumbit.app/kits/kit-1/high-tom.wav\",\r\n        title: \"high tom\"\r\n    },\r\n    e: {\r\n        sound: \"https://drumbit.app/kits/kit-1/medium-tom.wav\",\r\n        title: \"medium tom\"\r\n    },\r\n    a: {\r\n        sound: \"https://drumbit.app/kits/kit-1/hihat-op.wav\",\r\n        title: \"open hihat\"\r\n    },\r\n    s: {\r\n        sound: \"https://drumbit.app/kits/kit-1/low-tom.wav\",\r\n        title: \"low tom\"\r\n    },\r\n    d: {\r\n        sound: \"https://drumbit.app/kits/kit-1/hihat-cl.wav\",\r\n        title: \"closed Hihat\"\r\n    },\r\n    z: {\r\n        sound: \"https://drumbit.app/kits/kit-1/snare.wav\",\r\n        title: \"snare\"\r\n    },\r\n    x: {\r\n        sound: \"https://drumbit.app/kits/kit-1/kick.wav\",\r\n        title: \"kick\"\r\n    },\r\n    c: {title: \"wooom\", sound: \"https://drumbit.app/kits/fx5/fx5-2.wav\"},\r\n}\r\n\r\nexport default kit","import React, { useState } from 'react';\nimport './App.scss';\nimport DrumPad from \"./Components/DrumPad/DrumPad.component\"\nimport kit from \"./soundkeymapping\"\nconst kitKeys = Object.keys(kit)\n\nfunction App() {\n  const [textDisplay, setTextDisplay] = useState('')\n\n  return (\n    <div className=\"App\">\n      <h1>Drum Machine</h1>\n      <h2 id=\"display\">Now Playing: {textDisplay}</h2>\n      <div className=\"dm-container\">\n        <div id=\"drum-machine\">\n          {kitKeys.map((key) => {\n            return (<DrumPad key={key} buttonID={key.toUpperCase()} passedSound={kit[key].sound} title={kit[key].title} setTextDisplay={setTextDisplay} />)\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}